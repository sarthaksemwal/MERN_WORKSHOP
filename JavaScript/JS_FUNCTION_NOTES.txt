ARRAY FUNCTIONS IN JavaScript

array.isarray-
In JavaScript, Array.isArray() is a built-in method used to determine whether a given value is an array or not. It returns true if the value is an array and false otherwise.
x
1. **`push()`**: Adds one or more elements to the end of an array and returns the new length of the array.
   
   ```javascript
   const array = [1, 2, 3];
   array.push(4);
   console.log(array); // Output: [1, 2, 3, 4]
   ```

2. **`pop()`**: Removes the last element from an array and returns that element.
   
   ```javascript
   const array = [1, 2, 3];
   const poppedElement = array.pop();
   console.log(poppedElement); // Output: 3
   console.log(array); // Output: [1, 2]
   ```

3. **`shift()`**: Removes the first element from an array and returns that element, shifting all subsequent elements one index down.
   
   ```javascript
   const array = [1, 2, 3];
   const shiftedElement = array.shift();
   console.log(shiftedElement); // Output: 1
   console.log(array); // Output: [2, 3]
   ```

4. **`unshift()`**: Adds one or more elements to the beginning of an array and returns the new length of the array.
   
   ```javascript
   const array = [2, 3];
   array.unshift(1);
   console.log(array); // Output: [1, 2, 3]
   ```

5. **`slice()`**: Returns a shallow copy of a portion of an array into a new array object. You can specify the start and end indices.
   
   ```javascript
   const array = [1, 2, 3, 4, 5];
   const slicedArray = array.slice(1, 3);
   console.log(slicedArray); // Output: [2, 3]
   ```

6. **`splice()`**: Changes the contents of an array by removing or replacing existing elements and/or adding new elements in place.
   
   ```javascript
   const array = [1, 2, 3, 4, 5];
   array.splice(2, 1, 'a', 'b'); // Removes 1 element at index 2 and adds 'a' and 'b'
   console.log(array); // Output: [1, 2, 'a', 'b', 4, 5]
   ```

7. **`concat()`**: Returns a new array that combines the elements of the original array with other arrays or values.
   
   ```javascript
   const array1 = [1, 2];
   const array2 = [3, 4];
   const newArray = array1.concat(array2, 5);
   console.log(newArray); // Output: [1, 2, 3, 4, 5]
   ```

8. **`forEach()`**: Executes a provided function once for each array element.
   
   ```javascript
   const array = [1, 2, 3];
   array.forEach((element) => {
       console.log(element);
   });
   // Output:
   // 1
   // 2
   // 3
   ```

9. **`map()`**: Creates a new array populated with the results of calling a provided function on every element in the calling array.
   
   ```javascript
   const array = [1, 2, 3];
   const doubledArray = array.map((element) => {
       return element * 2;
   });
   console.log(doubledArray); // Output: [2, 4, 6]
   ```

10. **`filter()`**: Creates a new array with all elements that pass the test implemented by the provided function.
    
    ```javascript
    const array = [1, 2, 3, 4, 5];
    const filteredArray = array.filter((element) => {
        return element > 2;
    });
    console.log(filteredArray); // Output: [3, 4, 5]
    ```

These are just some of the commonly used array functions in JavaScript. There are many more available in the language, each serving its own purpose.

